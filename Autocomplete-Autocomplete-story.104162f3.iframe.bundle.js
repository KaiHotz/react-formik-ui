"use strict";(self.webpackChunkreact_formik_ui=self.webpackChunkreact_formik_ui||[]).push([[147],{"./src/components/Autocomplete/Autocomplete.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Structured:()=>Structured,Themed:()=>Themed,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),formik__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/formik/dist/formik.esm.js"),_Autocomplete__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Autocomplete/Autocomplete.tsx"),_Form__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Form/index.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Autocomplete",component:_Autocomplete__WEBPACK_IMPORTED_MODULE_2__.Z,parameters:{props:{propTables:[_Autocomplete__WEBPACK_IMPORTED_MODULE_2__.F]}}},suggestions=["Afghanistan","Aland Islands","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia, Plurinational State of","Bonaire, Sint Eustatius and Saba","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory","Brunei Darussalam"],Default=()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(formik__WEBPACK_IMPORTED_MODULE_1__.J9,{initialValues:{myAutocomplete:""},onSubmit:data=>alert(JSON.stringify(data))},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Form__WEBPACK_IMPORTED_MODULE_3__.Z,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Autocomplete__WEBPACK_IMPORTED_MODULE_2__.Z,{label:"Search",name:"myAutocomplete",hint:"This is a hint",suggestions}))),Structured=()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(formik__WEBPACK_IMPORTED_MODULE_1__.J9,{initialValues:{myAutocomplete:""},onSubmit:data=>alert(JSON.stringify(data))},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Form__WEBPACK_IMPORTED_MODULE_3__.Z,{styling:"structure"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Autocomplete__WEBPACK_IMPORTED_MODULE_2__.Z,{name:"myAutocomplete",label:"Search",hint:"This is a hint",suggestions}))),Themed=()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(formik__WEBPACK_IMPORTED_MODULE_1__.J9,{initialValues:{myAutocomplete:""},onSubmit:data=>alert(JSON.stringify(data))},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Form__WEBPACK_IMPORTED_MODULE_3__.Z,{styling:"theme"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Autocomplete__WEBPACK_IMPORTED_MODULE_2__.Z,{name:"myAutocomplete",label:"Search",hint:"This is a hint",suggestions})));Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'() => {\n  return <Formik initialValues={{\n    myAutocomplete: \'\'\n  }} onSubmit={data => alert(JSON.stringify(data))}>\n      <Form>\n        <Autocomplete label="Search" name="myAutocomplete" hint="This is a hint" suggestions={suggestions} />\n      </Form>\n    </Formik>;\n}',...Default.parameters?.docs?.source}}},Structured.parameters={...Structured.parameters,docs:{...Structured.parameters?.docs,source:{originalSource:'() => {\n  return <Formik initialValues={{\n    myAutocomplete: \'\'\n  }} onSubmit={data => alert(JSON.stringify(data))}>\n      <Form styling="structure">\n        <Autocomplete name="myAutocomplete" label="Search" hint="This is a hint" suggestions={suggestions} />\n      </Form>\n    </Formik>;\n}',...Structured.parameters?.docs?.source}}},Themed.parameters={...Themed.parameters,docs:{...Themed.parameters?.docs,source:{originalSource:'() => {\n  return <Formik initialValues={{\n    myAutocomplete: \'\'\n  }} onSubmit={data => alert(JSON.stringify(data))}>\n      <Form styling="theme">\n        <Autocomplete name="myAutocomplete" label="Search" hint="This is a hint" suggestions={suggestions} />\n      </Form>\n    </Formik>;\n}',...Themed.parameters?.docs?.source}}};try{Default.displayName="Default",Default.__docgenInfo={description:"",displayName:"Default",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Autocomplete/Autocomplete.story.tsx#Default"]={docgenInfo:Default.__docgenInfo,name:"Default",path:"src/components/Autocomplete/Autocomplete.story.tsx#Default"})}catch(__react_docgen_typescript_loader_error){}try{Structured.displayName="Structured",Structured.__docgenInfo={description:"",displayName:"Structured",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Autocomplete/Autocomplete.story.tsx#Structured"]={docgenInfo:Structured.__docgenInfo,name:"Structured",path:"src/components/Autocomplete/Autocomplete.story.tsx#Structured"})}catch(__react_docgen_typescript_loader_error){}try{Themed.displayName="Themed",Themed.__docgenInfo={description:"",displayName:"Themed",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Autocomplete/Autocomplete.story.tsx#Themed"]={docgenInfo:Themed.__docgenInfo,name:"Themed",path:"src/components/Autocomplete/Autocomplete.story.tsx#Themed"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/Autocomplete/Autocomplete.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>Autocomplete,Z:()=>Autocomplete_Autocomplete});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),formik_esm=__webpack_require__("./node_modules/formik/dist/formik.esm.js");var WithLabel=__webpack_require__("./src/components/WithLabel/index.ts");const Autocomplete=({name,id,suggestions,className,style,...rest})=>{const[{value}]=(0,formik_esm.U$)(name),[activeSuggestion,filteredSuggestions,showSuggestions,handleChange,handleClick,handleKeyDown]=((name,suggestions)=>{const{setFieldValue,setFieldTouched}=(0,formik_esm.u6)(),[activeSuggestion,setActiveSuggestion]=(0,react.useState)(0),[filteredSuggestions,setFilteredSuggestions]=(0,react.useState)(null),[showSuggestions,setShowSuggestions]=(0,react.useState)(!1);return[activeSuggestion,filteredSuggestions,showSuggestions,event=>{const{value}=event.currentTarget,filtered=suggestions?.filter((suggestion=>suggestion.toLowerCase().startsWith(value.toLowerCase())));setActiveSuggestion(0),filtered&&setFilteredSuggestions(filtered),setShowSuggestions(!0),setFieldValue(name,value),setFieldTouched(name,!0)},event=>{setActiveSuggestion(0),setFilteredSuggestions(null),setShowSuggestions(!1),setFieldValue(name,event.currentTarget.innerText),setFieldTouched(name,!0)},event=>{if("Enter"===event.key&&filteredSuggestions){if(event.preventDefault(),""===event?.currentTarget?.value)return;setShowSuggestions(!1),setFieldValue(name,filteredSuggestions[activeSuggestion]),setFieldTouched(name,!0)}else if("ArrowUp"===event.key&&filteredSuggestions){const{length}=filteredSuggestions;setActiveSuggestion(0===activeSuggestion?length-1:activeSuggestion-1)}else if("ArrowDown"===event.key&&filteredSuggestions){const{length}=filteredSuggestions;setActiveSuggestion(activeSuggestion===length-1?0:activeSuggestion+1)}}]})(name,suggestions);return react.createElement(react.Fragment,null,react.createElement("input",(0,esm_extends.Z)({},rest,{id:id||name,name,className,style,onChange:handleChange,onKeyDown:handleKeyDown,value,type:"text",tabIndex:0,"data-testid":"fui-autocomplete"})),showSuggestions&&!!value&&react.createElement("ul",{className:"suggestions"},filteredSuggestions?.map(((suggestion,index)=>react.createElement("li",{className:classnames_default()({"suggestion-active":index===activeSuggestion}),key:suggestion,onClick:handleClick,role:"presentation"},suggestion)))))},Autocomplete_Autocomplete=(0,WithLabel.Z)("autocomplete")(Autocomplete);try{Autocomplete.displayName="Autocomplete",Autocomplete.__docgenInfo={description:"",displayName:"Autocomplete",props:{name:{defaultValue:null,description:"Sets the Name of the Autocomplete",name:"name",required:!0,type:{name:"string"}},suggestions:{defaultValue:null,description:"Array of suggestions to be searchred in",name:"suggestions",required:!0,type:{name:"Suggestions"}},className:{defaultValue:null,description:"Adds a custom class to the Autocomplete input element",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"Adds a custom inline styles to the input element",name:"style",required:!1,type:{name:"CSSProperties"}},id:{defaultValue:null,description:"Sets an Id for the Input Field, if not passed, the id will be the name",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Sets the main Label for the Input Field",name:"label",required:!1,type:{name:"ReactNode"}},placeholder:{defaultValue:null,description:"Sets the Placeholder text",name:"placeholder",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Disables the Input Field",name:"disabled",required:!1,type:{name:"boolean"}},hint:{defaultValue:null,description:"Sets a hint text after/below the Input Field",name:"hint",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"Sets the field as requierd, if label is passed, an * is added to the end of the main label. Validation will only work if you pass the required() method in the yup validation schema",name:"required",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Autocomplete/Autocomplete.tsx#Autocomplete"]={docgenInfo:Autocomplete.__docgenInfo,name:"Autocomplete",path:"src/components/Autocomplete/Autocomplete.tsx#Autocomplete"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/WithLabel/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>WithLabel_WithLabel});var esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),formik_esm=__webpack_require__("./node_modules/formik/dist/formik.esm.js"),lodash_omit=__webpack_require__("./node_modules/lodash.omit/index.js"),lodash_omit_default=__webpack_require__.n(lodash_omit);const WithLabel=(component="input")=>WrappedComponent=>{const Label=props=>{const{name,label,hint,placeholder,type,disabled,required,style,format,onFocus,onBlur}=props,[hideLabel,setHide]=(0,react.useState)(!1),[field,{error}]=(0,formik_esm.U$)(name),hidden=type&&"hidden"===type,moveLabel="phoneInput"===component&&"NATIONAL"!==format,passableProps=lodash_omit_default()(props,["hint","label","onFocus","onBlur","required"]),hide=hideLabel||!!field.value||!!placeholder||!(!disabled||!field.value);return react.createElement("div",{className:classnames_default()("form-element",component,{"has-error":!!error,hidden})},react.createElement("div",{className:classnames_default()(`${component}-wrapper`,{disabled})},label&&react.createElement("span",{className:classnames_default()("label",{hide,"move-label":moveLabel})},`${label}${required?" *":""}`),WrappedComponent&&react.createElement(WrappedComponent,(0,esm_extends.Z)({onAnimationStart:e=>{setHide("onAutoFillStart"===e.animationName)},onFocus:event=>{onFocus&&onFocus(event),setHide(!0)},onBlur:event=>{onBlur&&onBlur(event),field.onBlur(name),setHide(!1)},style},passableProps))),react.createElement("span",{className:"rfui-error"},react.createElement(formik_esm.Bc,{name})),!!hint&&react.createElement("span",{className:"hint","data-testid":"fui-hint"},hint))};return(0,react.memo)(Label)},WithLabel_WithLabel=WithLabel;try{WithLabel.displayName="WithLabel",WithLabel.__docgenInfo={description:"",displayName:"WithLabel",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/WithLabel/WithLabel.tsx#WithLabel"]={docgenInfo:WithLabel.__docgenInfo,name:"WithLabel",path:"src/components/WithLabel/WithLabel.tsx#WithLabel"})}catch(__react_docgen_typescript_loader_error){}}}]);