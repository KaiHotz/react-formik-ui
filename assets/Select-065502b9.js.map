{"version":3,"file":"Select-065502b9.js","sources":["../../src/components/Select/Select.tsx"],"sourcesContent":["import React, { FC, CSSProperties, ChangeEvent, ReactNode } from 'react';\nimport { useField } from 'formik';\n\nimport WithLabel from '../WithLabel';\n\nexport interface IFOrmikUiSelectOption {\n  label: string;\n  value: string | number;\n}\n\nexport interface IFOrmikUiSelectProps {\n  /** Sets the Name of the Select Field */\n  name: string;\n  /** Array in the shape of [ { value: string or number, label: string } ] */\n  options: IFOrmikUiSelectOption[];\n  /** Adds a custom class to the select element of the Select component */\n  className: string;\n  /** Adds a custom inline styles to the select element */\n  style?: CSSProperties;\n  /** Disables the Select Field */\n  disabled?: boolean;\n  /** Sets an Id for the Select Field, if not passed, the id will be the name */\n  id: string;\n  /** Sets the main Label for the Select Field */\n  label?: ReactNode;\n  /** Sets a Placeholder as the first option with no value */\n  placeholder?: string;\n  /** Sets a hint text after/below the Select component */\n  hint?: ReactNode;\n  /** Sets the field as requierd, if label is passed, an * is added to the end of the main label. Validation will only work if you pass the required() method in the yup validation schema */\n  required?: boolean;\n  /** Allowes multiple selection */\n  multiple?: boolean;\n}\n\nexport const Select: FC<IFOrmikUiSelectProps> = ({\n  disabled,\n  id,\n  label,\n  name,\n  options,\n  placeholder,\n  required,\n  className,\n  style,\n  multiple,\n  ...rest\n}) => {\n  const [{ value, onChange }, , { setValue }] = useField(name);\n\n  const handleMultipleChange = async (event: ChangeEvent<HTMLSelectElement>): Promise<void> => {\n    const val = [].slice.call(event.target.selectedOptions).map((option: IFOrmikUiSelectOption) => option.value);\n    await setValue(val);\n  };\n\n  return (\n    <select\n      onChange={multiple ? handleMultipleChange : onChange}\n      {...rest}\n      id={id || name}\n      name={name}\n      className={className}\n      style={style}\n      value={value}\n      disabled={disabled}\n      multiple={multiple}\n      data-testid=\"fui-select\"\n    >\n      {placeholder && (\n        <option value=\"\" data-testid=\"fui-select-option\">{`${placeholder}${!label && required ? ' *' : ''}`}</option>\n      )}\n      {options.map((option) => (\n        <option key={option.label} value={option.value} data-testid=\"fui-select-option\">\n          {option.label}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default WithLabel('select')(Select);\n"],"names":["Select","disabled","id","label","name","options","placeholder","required","className","style","multiple","rest","value","onChange","setValue","useField","jsxs","event","val","option","jsx","Select$1","WithLabel"],"mappings":"iGAmCO,MAAAA,EAAA,CAAA,CAA0C,SAAAC,EAC/C,GAAAC,EACA,MAAAC,EACA,KAAAC,EACA,QAAAC,EACA,YAAAC,EACA,SAAAC,EACA,UAAAC,EACA,MAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,IAAA,CACE,KAAA,CAAA,CAAA,MAAAC,EAAA,SAAAC,CAAA,EAAA,CAAA,CAAA,SAAAC,EAAA,EAAAC,EAAAX,CAAA,EAOA,OAAAY,EACE,SAAC,CAAA,SAAAN,EANH,MAAAO,GAAA,CACE,MAAAC,EAAA,CAAA,EAAA,MAAA,KAAAD,EAAA,OAAA,eAAA,EAAA,IAAAE,GAAAA,EAAA,KAAA,EACA,MAAAL,EAAAI,CAAA,CAAkB,EAIjBL,EAC6C,GAAAF,EACxC,GAAAT,GAAAE,EACM,KAAAA,EACV,UAAAI,EACA,MAAAC,EACA,MAAAG,EACA,SAAAX,EACA,SAAAS,EACA,cAAA,aACY,SAAA,CAEXJ,GAAAc,EAAA,SAAA,CAAA,MAAA,GAAA,cAAA,oBAAA,SAAA,GAAAd,CAAA,GAAA,CAAAH,GAAAI,EAAA,KAAA,EAAA,GAAA,EACqGF,EAAA,IAAAc,GAAAC,EAAA,SAAA,CAAA,MAAAD,EAAA,MAAA,cAAA,oBAAA,SAAAA,EAAA,OAAAA,EAAA,KAAA,CAAA,CAMrG,CAAA,CAAA,CAGP,EAEAE,EAAAC,EAAA,QAAA,EAAAtB,CAAA"}