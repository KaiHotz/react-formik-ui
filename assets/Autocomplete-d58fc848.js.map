{"version":3,"file":"Autocomplete-d58fc848.js","sources":["../../src/components/Autocomplete/useAutocomplete.ts","../../src/components/Autocomplete/Autocomplete.tsx"],"sourcesContent":["import { useState, MouseEvent, ChangeEvent, KeyboardEvent } from 'react';\nimport { useFormikContext } from 'formik';\n\nimport { Suggestions } from './types';\n\nexport const useAutocomplete = (\n  name: string,\n  suggestions: Suggestions,\n): [\n  activeSuggestion: string | number,\n  filteredSuggestions: Suggestions,\n  showSuggestions: boolean,\n  handleChange: (event: ChangeEvent<HTMLInputElement>) => void,\n  handleClick: (event: MouseEvent<HTMLLIElement>) => void,\n  handleKeyDown: (event: KeyboardEvent<HTMLInputElement>) => void,\n] => {\n  const { setFieldValue, setFieldTouched } = useFormikContext();\n  const [activeSuggestion, setActiveSuggestion] = useState(0);\n  const [filteredSuggestions, setFilteredSuggestions] = useState<Suggestions>(null);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  const handleChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    const filtered = suggestions?.filter((suggestion: string) => suggestion.toLowerCase().startsWith(value.toLowerCase()));\n\n    setActiveSuggestion(0);\n    if (filtered) {\n      setFilteredSuggestions(filtered);\n    }\n    setShowSuggestions(true);\n\n    await setFieldValue(name, value);\n    await setFieldTouched(name, true);\n  };\n\n  const handleClick = async (event: MouseEvent<HTMLLIElement>) => {\n    setActiveSuggestion(0);\n    setFilteredSuggestions(null);\n    setShowSuggestions(false);\n\n    await setFieldValue(name, event.currentTarget.innerText);\n    await setFieldTouched(name, true);\n  };\n\n  const handleKeyDown = async (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter' && filteredSuggestions) {\n      event.preventDefault();\n      if (event?.currentTarget?.value === '') return;\n\n      setShowSuggestions(false);\n      await setFieldValue(name, filteredSuggestions[activeSuggestion]);\n      await setFieldTouched(name, true);\n    } else if (event.key === 'ArrowUp' && filteredSuggestions) {\n      const { length } = filteredSuggestions;\n      setActiveSuggestion(activeSuggestion === 0 ? length - 1 : activeSuggestion - 1);\n    } else if (event.key === 'ArrowDown' && filteredSuggestions) {\n      const { length } = filteredSuggestions;\n\n      setActiveSuggestion(activeSuggestion === length - 1 ? 0 : activeSuggestion + 1);\n    }\n  };\n\n  return [activeSuggestion, filteredSuggestions, showSuggestions, handleChange, handleClick, handleKeyDown];\n};\n","import React, { FC, CSSProperties, ReactNode } from 'react';\nimport cx from 'clsx';\nimport { useField } from 'formik';\n\nimport { useAutocomplete } from './useAutocomplete';\nimport { Suggestions } from './types';\nimport WithLabel from '../WithLabel';\n\nexport interface IFormikUiAutocompleteProps {\n  /** Sets the Name of the Autocomplete */\n  name: string;\n  /** Array of suggestions to be searchred in */\n  suggestions: Suggestions;\n  /** Adds a custom class to the Autocomplete input element */\n  className?: string;\n  /** Adds a custom inline styles to the input element */\n  style?: CSSProperties;\n  /** Sets an Id for the Input Field, if not passed, the id will be the name */\n  id?: string;\n  /** Sets the main Label for the Input Field */\n  label?: ReactNode;\n  /** Sets the Placeholder text */\n  placeholder?: string;\n  /** Disables the Input Field */\n  disabled?: boolean;\n  /** Sets a hint text after/below the Input Field */\n  hint?: string;\n  /** Sets the field as requierd, if label is passed, an * is added to the end of the main label. Validation will only work if you pass the required() method in the yup validation schema */\n  required?: boolean;\n}\n\nexport const Autocomplete: FC<IFormikUiAutocompleteProps> = ({ name, id, suggestions, className, style, ...rest }) => {\n  const [{ value }] = useField(name);\n  const [activeSuggestion, filteredSuggestions, showSuggestions, handleChange, handleClick, handleKeyDown] =\n    useAutocomplete(name, suggestions);\n\n  return (\n    <>\n      <input\n        {...rest}\n        id={id || name}\n        name={name}\n        className={className}\n        style={style}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        value={value as string | number}\n        type=\"text\"\n        tabIndex={0}\n        data-testid=\"fui-autocomplete\"\n      />\n      {showSuggestions && !!value && (\n        <ul className=\"suggestions\">\n          {filteredSuggestions?.map((suggestion: string, index: number) => {\n            const sugetionItem = (\n              <li\n                className={cx({ 'suggestion-active': index === activeSuggestion })}\n                key={suggestion}\n                onClick={handleClick}\n                role=\"presentation\"\n              >\n                {suggestion}\n              </li>\n            );\n\n            return sugetionItem;\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default WithLabel('autocomplete')(Autocomplete);\n"],"names":["useAutocomplete","name","suggestions","setFieldValue","setFieldTouched","useFormikContext","activeSuggestion","setActiveSuggestion","useState","filteredSuggestions","setFilteredSuggestions","showSuggestions","setShowSuggestions","event","value","filtered","suggestion","_a","length","Autocomplete","id","className","style","rest","useField","handleChange","handleClick","handleKeyDown","jsxs","Fragment","jsx","index","cx","Autocomplete$1","WithLabel"],"mappings":"8JAKa,MAAAA,EAAkB,CAC7BC,EACAC,IAQG,CACH,KAAM,CAAE,cAAAC,EAAe,gBAAAC,CAAgB,EAAIC,EAAiB,EACtD,CAACC,EAAkBC,CAAmB,EAAIC,WAAS,CAAC,EACpD,CAACC,EAAqBC,CAAsB,EAAIF,WAAsB,IAAI,EAC1E,CAACG,EAAiBC,CAAkB,EAAIJ,WAAS,EAAK,EA2C5D,MAAO,CAACF,EAAkBG,EAAqBE,EAzC1B,MAAOE,GAAyC,CAC7D,KAAA,CAAE,MAAAC,CAAM,EAAID,EAAM,cAClBE,EAAWb,GAAA,YAAAA,EAAa,OAAQc,GAAuBA,EAAW,YAAY,EAAE,WAAWF,EAAM,YAAY,CAAC,GAEpHP,EAAoB,CAAC,EACjBQ,GACFL,EAAuBK,CAAQ,EAEjCH,EAAmB,EAAI,EAEjB,MAAAT,EAAcF,EAAMa,CAAK,EACzB,MAAAV,EAAgBH,EAAM,EAAI,CAAA,EAGd,MAAOY,GAAqC,CAC9DN,EAAoB,CAAC,EACrBG,EAAuB,IAAI,EAC3BE,EAAmB,EAAK,EAExB,MAAMT,EAAcF,EAAMY,EAAM,cAAc,SAAS,EACjD,MAAAT,EAAgBH,EAAM,EAAI,CAAA,EAGZ,MAAOY,GAA2C,OAClE,GAAAA,EAAM,MAAQ,SAAWJ,EAAqB,CAE5C,GADJI,EAAM,eAAe,IACjBI,EAAAJ,GAAA,YAAAA,EAAO,gBAAP,YAAAI,EAAsB,SAAU,GAAI,OAExCL,EAAmB,EAAK,EACxB,MAAMT,EAAcF,EAAMQ,EAAoBH,CAAgB,CAAC,EACzD,MAAAF,EAAgBH,EAAM,EAAI,CACvB,SAAAY,EAAM,MAAQ,WAAaJ,EAAqB,CACnD,KAAA,CAAE,OAAAS,CAAW,EAAAT,EACnBF,EAAoBD,IAAqB,EAAIY,EAAS,EAAIZ,EAAmB,CAAC,CACrE,SAAAO,EAAM,MAAQ,aAAeJ,EAAqB,CACrD,KAAA,CAAE,OAAAS,CAAW,EAAAT,EAEnBF,EAAoBD,IAAqBY,EAAS,EAAI,EAAIZ,EAAmB,CAAC,CAChF,CAAA,CAGsG,CAC1G,EChCOa,EAAA,CAAA,CAAA,KAAAlB,EAAA,GAAAmB,EAAA,YAAAlB,EAAA,UAAAmB,EAAA,MAAAC,EAAA,GAAAC,KAAA,CACL,KAAA,CAAA,CAAA,MAAAT,CAAA,CAAA,EAAAU,EAAAvB,CAAA,EACA,CAAAK,EAAAG,EAAAE,EAAAc,EAAAC,EAAAC,CAAA,EAAA3B,EAAAC,EAAAC,CAAA,EAGA,OAAA0B,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAA,QAAC,CAAA,GAAAP,EACK,GAAAH,GAAAnB,EACM,KAAAA,EACV,UAAAoB,EACA,MAAAC,EACA,SAAAG,EACU,UAAAE,EACC,MAAAb,EACX,KAAA,OACK,SAAA,EACK,cAAA,kBACE,CAAA,EACdH,GAAA,CAAA,CAAAG,GAAAgB,EAAA,KAAA,CAAA,UAAA,cAAA,SAAArB,GAAA,YAAAA,EAAA,IAAA,CAAAO,EAAAe,IAIMD,EACE,KAAC,CAAA,UAAAE,EAAA,CAAA,oBAAAD,IAAAzB,CAAA,CAAA,EACkE,QAAAoB,EAExD,KAAA,eACJ,SAAAV,CAEJ,EAAAA,CAJI,GAQF,CAEX,CAAA,CAAA,CAIR,EAEAiB,EAAAC,EAAA,cAAA,EAAAf,CAAA"}